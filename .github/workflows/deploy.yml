name: Deploy

on:
  workflow_call:
    inputs:
      tag:
        required: false
        type: string
        description: "The tag to deploy, e.g. 1.0.0 or 1.0.0-staging"
      version:
        required: false
        type: string
        description: "The version to deploy, e.g. 1.0.0"

env:
  DEVOPS_REPOSITORY_URL: https://github.com/Shawiizz/devops-framework.git
  DEVOPS_FRAMEWORK_VERSION: 1.0.37-dev17

jobs:
  discover-hosts:
    runs-on: ubuntu-latest
    name: Discover deployment hosts
    outputs:
      hosts: ${{ steps.discover.outputs.hosts }}
      env: ${{ steps.discover.outputs.env }}
      tag: ${{ steps.discover.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Discover hosts and environment
        id: discover
        run: |
          if [ -n "${{ inputs.tag }}" ]; then
            TAG="${{ inputs.tag }}"
            ENVIRONMENT="production"
            
            if [[ "$TAG" == *"-"* ]]; then
              ENVIRONMENT="${TAG##*-}"
            fi
          elif [ -n "${{ inputs.version }}" ]; then
            TAG="${{ inputs.version }}"
            ENVIRONMENT="production"
          else
            echo "::error:: Either tag or version input must be provided"
            exit 1
          fi

          echo "env=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          if [ ! -f ".deployment/env/.env.${ENVIRONMENT}" ]; then
              echo "::error:: File .deployment/env/.env.${ENVIRONMENT} does not exist, cannot execute on unknown environment"
              exit 1
          fi
          
          #######################################
          ###### Discover hosts to deploy #######
          #######################################
          HOSTS_LIST=()
          BASE_FILE=".deployment/env/.env.${ENVIRONMENT}"
          
          if [ -f "$BASE_FILE" ]; then
            HOSTS_LIST+=("main")
          fi
          
          for env_file in .deployment/env/.env.${ENVIRONMENT}.*; do
            if [ -f "$env_file" ]; then
              SUFFIX=$(basename "$env_file" | sed "s/\.env\.${ENVIRONMENT}\.//")
              if [[ "$SUFFIX" != "${ENVIRONMENT}" ]]; then
                HOSTS_LIST+=("$SUFFIX")
              fi
            fi
          done
          
          HOSTS_JSON="["
          for i in "${!HOSTS_LIST[@]}"; do
            if [ $i -eq 0 ]; then
              HOSTS_JSON="$HOSTS_JSON\"${HOSTS_LIST[$i]}\""
            else
              HOSTS_JSON="$HOSTS_JSON,\"${HOSTS_LIST[$i]}\""
            fi
          done
          HOSTS_JSON="$HOSTS_JSON]"
          
          echo "hosts=$HOSTS_JSON" >> $GITHUB_OUTPUT
          echo "Discovered hosts: $HOSTS_JSON"

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to ${{ needs.discover-hosts.outputs.env }} (${{ matrix.host }} host)
    needs: discover-hosts
    strategy:
      matrix:
        host: ${{ fromJson(needs.discover-hosts.outputs.hosts) }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          docker-images: false

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment variables for host ${{ matrix.host }}
        id: vars
        run: |
          ENV="${{ needs.discover-hosts.outputs.env }}"
          HOST="${{ matrix.host }}"
          
          if [[ "$HOST" == "main" ]]; then
            SSH_SECRET_NAME="$(echo "${ENV}" | tr '[:lower:]' '[:upper:]')_SSH_PRIVATE_KEY"
          else
            SSH_SECRET_NAME="$(echo "${ENV}" | tr '[:lower:]' '[:upper:]')_$(echo "${HOST}" | tr '[:lower:]' '[:upper:]')_SSH_PRIVATE_KEY"
          fi

          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "host=$HOST" >> $GITHUB_OUTPUT
          echo "tag=${{ needs.discover-hosts.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "SSH_KEY_SECRET_NAME=$SSH_SECRET_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          npm i -g shawiizz-decomposerize
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq &&\
          chmod +x /usr/local/bin/yq

      - name: Clone devops repository
        run: git clone --branch "$DEVOPS_FRAMEWORK_VERSION" "$DEVOPS_REPOSITORY_URL" devops-framework

      - name: Deploy to host ${{ matrix.host }}
        run: |          
          # Load secrets as environment variables
          echo '${{ toJSON(secrets) }}' > secrets.json
          for key in $(jq -r 'keys[]' secrets.json); do
            value=$(jq -r --arg key "$key" '.[$key]' secrets.json)
            export "$key=$value"
          done

          ENV="${{ steps.vars.outputs.env }}"
          export HOSTNAME="${{ steps.vars.outputs.host }}"
          
          #######################################
          ######### Load env variables ##########
          #######################################
          set -a
          source ".deployment/env/.env.${ENV}"
          
          if [[ "$HOSTNAME" != "main" ]]; then
            if [ -f ".deployment/env/.env.${ENV}.${HOSTNAME}" ]; then
              source ".deployment/env/.env.${ENV}.${HOSTNAME}"
            fi
          fi
          set +a
          
          export ENV="${{ steps.vars.outputs.env }}"
          export VERSION="${{ steps.vars.outputs.tag }}"

          #######################################
          ### Load framework config options #####
          #######################################
          if [ -f ".deployment/config.yml" ]; then
            echo "Loading framework configuration options from .deployment/config.yml"
            export $(yq e '.options | to_entries | map("FRAMEWORK_OPTIONS_" + .key + "=" + .value) | join(" ")' .deployment/config.yml | awk -F= '{printf "%s=%s ", toupper($1), $2}')
          else
            echo "No .deployment/config.yml found, skipping framework configuration options"
          fi

          #######################################
          ######### Build docker images #########
          #######################################
          if [[ "${FRAMEWORK_OPTIONS_REMOTE_BUILD}" != "true" ]]; then
            echo "Building Docker images locally in CI/CD..."
            if [[ "$HOSTNAME" == "main" ]]; then
              bash devops-framework/.github/scripts/build_docker_images.sh
            else
              bash devops-framework/.github/scripts/build_docker_images.sh --host="$HOSTNAME"
            fi
          else
            echo "Remote build enabled - skipping local image build"
            echo "Images will be built directly on the remote server"
          fi

          #######################################
          ######### Save project root path ######
          #######################################
          export PROJECT_ROOT=$(pwd)

          ######### Change working directory #########
          cd devops-framework
          
          #######################################
          ############ Setup SSH Key ############
          #######################################
          
          mkdir -p ssh
          echo "${!SSH_KEY_SECRET_NAME}" | tr -d '\r' > ssh/remote_private_key
          chmod 600 ssh/*
          eval "$(ssh-agent -s)"
          ssh-add ssh/remote_private_key

          #######################################
          ######### Deploy with Ansible #########
          #######################################
          export ANSIBLE_HOST_KEY_CHECKING=False
          export ANSIBLE_BECOME_PASSWORD=${{ secrets.ANSIBLE_BECOME_PASSWORD }}
          export GIT_TOKEN=${{ secrets.GIT_TOKEN }}

          SKIP_TAGS="configure_host"
          if [ ! -d "../.deployment/templates/nginx" ] || [ -z "$(ls -A ../.deployment/templates/nginx 2>/dev/null)" ]; then
            echo "No nginx configuration found, skipping nginx role"
            SKIP_TAGS="${SKIP_TAGS},nginx"
          fi
          
          if [[ "$HOSTNAME" == "main" ]]; then
            INVENTORY_HOST="${ENV}"
          else
            INVENTORY_HOST="${ENV}-${HOSTNAME}"
          fi
          
          sed -i "s/REMOTE_HOST/${INVENTORY_HOST}/g" ansible/inventory.yml
          ansible-galaxy role install geerlingguy.docker
          ansible-playbook ansible/deploy.yml -i ansible/inventory.yml --skip-tags "$SKIP_TAGS"
