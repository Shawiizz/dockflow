---
- name: Deploy Docker Images to Remote Server
  hosts: all:!localhost
  vars:    
    compose_path: "../../.deployment/docker/docker-compose.yml"
    tmp_dir: "/tmp"
    global_no_log: "{{ not (lookup('env', 'FRAMEWORK_OPTIONS_ENABLE_DEBUG_LOGS') | default('false') | bool) }}"
    deploy_services: "{{ lookup('env', 'DEPLOY_DOCKER_SERVICES') | default('', true) }}"
    services_option: "{{ '--services=' + deploy_services if deploy_services else '' }}"
    environmentize: "{{ (lookup('env', 'FRAMEWORK_OPTIONS_ENVIRONMENTIZE') | default('true', true)) | bool }}"
    environmentize_option: "{{ '--environmentize' if (environmentize | bool) else '' }}"
    remote_build: "{{ (lookup('env', 'FRAMEWORK_OPTIONS_REMOTE_BUILD') | default('false', true)) | bool }}"
    framework_version: "1.0.37-dev17"
    decomposerize_types:
      - name: "setup"
        base_options: "--create-networks --create-volumes --stop-and-remove"
        ignore_errors: yes  # Networks/volumes might already exist
      - name: "run"
        base_options: "--docker-run --docker-run-detach"
        ignore_errors: no
      - name: "cleanup"
        base_options: "--delete-images"
        ignore_errors: yes  # New images are used by containers
  pre_tasks:
    - name: Display DevOps Framework version
      debug:
        msg: "DevOps Framework v{{ framework_version }}"
  roles:
    - role: geerlingguy.docker
    - role: nginx
      tags:
        - nginx
    - role: private_ssh_keys
    - role: services   
    - role: remote-build
      when: remote_build | bool
    - role: image-transfer
      when: not (remote_build | bool)
    - role: execute-scripts
  tasks:
    - name: Process Docker commands for each type (with logs)
      include_tasks: process_docker_commands.yml
      loop: "{{ decomposerize_types }}"
      loop_control:
        loop_var: cmd_type
      no_log: false
      when: not global_no_log

    - name: Process Docker commands for each type (silent)
      include_tasks: process_docker_commands.yml
      loop: "{{ decomposerize_types }}"
      loop_control:
        loop_var: cmd_type
      no_log: true
      when: global_no_log