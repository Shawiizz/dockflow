---
- name: Ensure Git is installed on remote server
  apt:
    name: git
    state: present
    update_cache: yes
  become: yes

- name: Create temporary build directory on remote
  file:
    path: /tmp/docker-build-{{ lookup('env', 'ENV') }}-{{ lookup('env', 'VERSION') }}
    state: directory
    mode: '0755'

- name: Clean up old temporary build directories
  shell: |
    find /tmp -maxdepth 1 -name 'docker-build-*' -type d -mtime +1 -exec rm -rf {} + || true
  register: cleanup_old_dirs
  changed_when: false
  ignore_errors: yes

- name: Clean up Docker to free space
  shell: |
    docker image prune -af || true
    docker builder prune -af || true
  register: cleanup_result
  changed_when: cleanup_result.rc == 0

- name: Get repository URL from Git (from parent project directory)
  shell: git config --get remote.origin.url
  args:
    chdir: "{{ lookup('env', 'PROJECT_ROOT') or '..' }}"
  delegate_to: localhost
  register: repo_url_raw
  changed_when: false

- name: Get current branch name from Git (from parent project directory)
  shell: git rev-parse --abbrev-ref HEAD
  args:
    chdir: "{{ lookup('env', 'PROJECT_ROOT') or '..' }}"
  delegate_to: localhost
  register: branch_name_raw
  changed_when: false
  failed_when: false

- name: Get current commit SHA from Git (from parent project directory)
  shell: git rev-parse HEAD
  args:
    chdir: "{{ lookup('env', 'PROJECT_ROOT') or '..' }}"
  delegate_to: localhost
  register: commit_sha_raw
  changed_when: false
  failed_when: false

- name: Set repository URL and prepare for cloning
  set_fact:
    repo_url: "{{ repo_url_raw.stdout | trim }}"
    git_token: "{{ lookup('env', 'GIT_TOKEN') | default('', true) }}"
    git_ref: "{{ (branch_name_raw.stdout | default('main', true) | trim) }}"
    git_sha: "{{ (commit_sha_raw.stdout | default('', true) | trim) }}"
    ci_job_token: "{{ lookup('env', 'CI_JOB_TOKEN') | default('', true) }}"

- name: Use CI_JOB_TOKEN if no explicit git_token provided (GitLab)
  set_fact:
    effective_git_token: "{{ git_token if git_token else ci_job_token }}"
  no_log: true

- name: Build authenticated Git URL for private repos
  set_fact:
    clone_url: >-
      {%- if effective_git_token -%}
        {%- if 'github.com' in repo_url -%}
          {{ repo_url | regex_replace('^https://github.com/', 'https://x-access-token:' + effective_git_token + '@github.com/') | regex_replace('^git@github.com:', 'https://x-access-token:' + effective_git_token + '@github.com/') }}
        {%- elif 'gitlab.com' in repo_url or 'gitlab' in repo_url -%}
          {{ repo_url | regex_replace('^https://([^/]+)/', 'https://oauth2:' + effective_git_token + '@\\1/') | regex_replace('^git@([^:]+):', 'https://oauth2:' + effective_git_token + '@\\1/') }}
        {%- else -%}
          {{ repo_url }}
        {%- endif -%}
      {%- else -%}
        {{ repo_url }}
      {%- endif -%}
  no_log: true

- name: Clone repository to remote server
  shell: |
    rm -rf /tmp/docker-build-{{ lookup('env', 'ENV') }}-{{ lookup('env', 'VERSION') }}
    git clone --branch {{ git_ref }} --single-branch {{ clone_url }} /tmp/docker-build-{{ lookup('env', 'ENV') }}-{{ lookup('env', 'VERSION') }}
    {% if git_sha %}
    cd /tmp/docker-build-{{ lookup('env', 'ENV') }}-{{ lookup('env', 'VERSION') }}
    git checkout {{ git_sha }}
    {% endif %}
  environment:
    GIT_TERMINAL_PROMPT: "0"
  register: git_clone_result

- name: Fail if git clone failed
  fail:
    msg: "Failed to clone repository. Check if GIT_TOKEN is set for private repos or if the server has access to the repository."
  when: git_clone_result.rc is defined and git_clone_result.rc != 0

- name: Generate build commands using decomposerize
  shell: |
    cd {{ lookup('env', 'PROJECT_ROOT') or '..' }}/.deployment/docker
    decomposerize docker-compose.yml --docker-build {{ services_option }} {{ environmentize_option }} --ansible-env-vars-format > /tmp/decomposerize_build.j2
  delegate_to: localhost
  changed_when: false

- name: Render template with evaluated variables
  template:
    src: /tmp/decomposerize_build.j2
    dest: /tmp/decomposerize_build_rendered.sh
  delegate_to: localhost
  changed_when: false

- name: Get rendered commands
  slurp:
    src: /tmp/decomposerize_build_rendered.sh
  delegate_to: localhost
  register: rendered_build_script
  changed_when: false

- name: Set evaluated build commands
  set_fact:
    build_commands: >-
      {{
        rendered_build_script.content
        | b64decode
        | split('\n')
        | map('trim')
        | select('truthy')
        | list
      }}

- name: Display evaluated build commands
  debug:
    msg: "Evaluated command: {{ item }}"
  loop: "{{ build_commands }}"

- name: Build Docker images on remote server
  shell: |
    cd /tmp/docker-build-{{ lookup('env', 'ENV') }}-{{ lookup('env', 'VERSION') }}/.deployment/docker
    {{ item }} 2>&1
  loop: "{{ build_commands }}"
  loop_control:
    label: >-
      {%- set image_match = item | regex_search('-t\\s+"?([^"\\s]+)"?') -%}
      {%- if image_match -%}
        Building {{ item | regex_replace('.*-t\\s+"?([^"\\s]+)"?.*', '\\1') }}
      {%- else -%}
        Building image
      {%- endif -%}
  when: build_commands is defined and build_commands | length > 0
  async: 3600  # Allow up to 1 hour for build
  poll: 5      # Check status every 5 seconds for more frequent updates
  register: build_results
  ignore_errors: yes  # Don't fail immediately, collect all results first
  environment:
    DOCKER_BUILDKIT: "1"
    BUILDKIT_PROGRESS: "plain"  # Force plain output for better log streaming

- name: Display build output
  debug:
    msg: "{{ item.stdout_lines | default([]) }}"
  loop: "{{ build_results.results | default([]) }}"
  when:
    - item.stdout_lines is defined
    - item.stdout_lines | length > 0
  loop_control:
    label: "Build output"

- name: Show build failures with full output
  debug:
    msg: |
      Failed to build image: {{ item.item }}
      Return code: {{ item.rc }}
      Duration: {{ item.delta | default('N/A') }}
      
      STDOUT:
      {{ item.stdout | default('No stdout') }}
      
      STDERR:
      {{ item.stderr | default('No stderr') }}
  loop: "{{ build_results.results | default([]) }}"
  when:
    - item.rc is defined
    - item.rc != 0

- name: Fail if any build failed
  fail:
    msg: "One or more Docker builds failed. Check the output above for details."
  when: build_results.results | selectattr('rc', 'defined') | selectattr('rc', 'ne', 0) | list | length > 0

- name: Cleanup temporary build directory
  file:
    path: /tmp/docker-build-{{ lookup('env', 'ENV') }}-{{ lookup('env', 'VERSION') }}
    state: absent
  ignore_errors: yes
